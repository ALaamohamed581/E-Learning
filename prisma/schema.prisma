// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins","omitApi"]
   
}
model Student {
  id           Int              @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String           @unique
  password     String
  image        String?
  phoneNumber  String
  teachers     Teacher[]
certificate Certificate[]
  courses           Course[]
  orders       Order[]
  role Roles @default(STUDENT)
permissions Permission[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  sessionId Message[] 
  Carts Cart[]
    @@index([id])
}

model Teacher {
  id           Int              @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String           @unique
  password     String
  image        String
  phoneNumber  String
  role Roles @default(TEACHER)
  students     Student[]
permissions Permission[]
course Course[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
    @@index([id])
}



model Course {
  id           Int              @id @default(autoincrement())
  name         String
  startDate    DateTime? 
  description  String
  teacherId Int
  price Int
  duration Float
  certificate Certificate[]

    level        String
    category     String
    certificatesid Int?
students     Student[]
  videos       Video[]
orders Order[]
 CartIItem CartItem[]
teacher Teacher  @relation(fields: [teacherId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
    @@index([id])
}

model Video {
  id           Int              @id @default(autoincrement())
  name         String
  src          String
  courseId     Int
  duration Float @default(0)
  course       Course           @relation(fields: [courseId], references: [id])
  order Int @default(autoincrement())
watched Boolean
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  videoWatched VideWtached[]
  @@index([id])
}

model VideWtached{
  studentId Int
  VideoId Int
  courseId Int
  videos Video @relation(fields: [VideoId], references: [id])
  wtached Boolean? @default(false)
  @@id([studentId,VideoId,courseId])

}

model Certificate {
  id           Int              @id @default(autoincrement())

  studentId    Int       
  courseId     Int             
 
  student   Student @relation(fields: [studentId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])
firstName String
lastName String 

courseName String

CourseDuration Int

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  @@index([id])
  }

model Permission {
  id           Int              @id @default(autoincrement())
  allowed      String[]
  admins       Admin[]
  teachers     Teacher[]
  students     Student[]

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
    @@index([id])
}







model Admin {
  id           Int              @id @default(autoincrement())
  name         String
  email        String           @unique
  password     String
  role Roles        @default(ADMIN)
permissions Permission[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
 sessionId Message[]
   @@index([id])
}

model Message {
  id           Int              @id @default(autoincrement())
  senderId   String?
  receiverId String?
  sessionId  String?
  content      String

  adminId Int?
  studentId Int?
   admin Admin? @relation(fields: [adminId],references: [id])
   student Student? @relation(fields: [studentId],references: [id])

  @@index([id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Order {
  id           Int              @id @default(autoincrement())
  date         DateTime
  payment      String
  email        String
  studentId    Int
  student      Student          @relation(fields: [studentId], references: [id])
  courses      Course[]
  @@index([id])
  CartId Int @unique 
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}
model Cart{
 id           Int              @id @default(autoincrement())
 studentId Int  

 carttItems CartItem[]
 orderId Int?
  @@index([id])
 Student Student  @relation(fields: [studentId], references: [id])
}
model CartItem {
  id       Int    @id @default(autoincrement())
  cartId   Int?

  cousreId Int
  course Course     @relation(fields: [cousreId], references: [id])
 
  cart     Cart?   @relation(fields: [cartId], references: [id])
 
  quantity Int
  @@index([id])
}

 enum Roles{
  STUDENT 
  TEACHER
  ADMIN
  SUPER_ADMIN
} 
