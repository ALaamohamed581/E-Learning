// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins","omitApi"]
   
}
model Student {
  id           Int              @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String           @unique
  password     String
  image        String?
  phoneNumber  String
  teachers     Teacher[]
  certificates Certificate[]
  courses           Course[]
  orders       Order[]
StudentPermission Permission[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Teacher {
  id           Int              @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String           @unique
  password     String
  image        String
  phoneNumber  String
  students     Student[]
  certificates Certificate[]
permissions Permission[]
course Course[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}



model Course {
  id           Int              @id @default(autoincrement())
  name         String
  startDate    DateTime? 
  description  String
  teacherId Int
  price Int
  duration Int
    level        String
    category     String
  certificates Certificate[]
students     Student[]
  videos       Video[]
orders Order[]

teacher Teacher  @relation(fields: [teacherId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Video {
  id           Int              @id @default(autoincrement())
  name         String
  src          String
  courseId     Int
  course       Course           @relation(fields: [courseId], references: [id])
  order Int @default(autoincrement())
watched Boolean
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model VideWtached{
  studentId Int
  VideoId Int
  courseId Int
  wtached Boolean? @default(false)
  @@id([studentId,VideoId,courseId])

}

model Certificate {
  id           Int              @id @default(autoincrement())
  name         String
  issueDate    DateTime
  studentId    Int
  courseId     Int              @unique
  teacherId    Int
  student      Student          @relation(fields: [studentId], references: [id])
  course       Course           @relation(fields: [courseId], references: [id])
  teacher      Teacher          @relation(fields: [teacherId], references: [id])

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Permission {
  id           Int              @id @default(autoincrement())
  allowed      String[]
  admins       Admin[]
  teachers     Teacher[]
  students     Student[]

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}







model Admin {
  id           Int              @id @default(autoincrement())
  name         String
  email        String           @unique
  password     String
  role         String
permissions Permission[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Message {
  id           Int              @id @default(autoincrement())
  sender       String
  receiver     String
  content      String
  date         DateTime

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Order {
  id           Int              @id @default(autoincrement())
  date         DateTime
  payment      String
  email        String
  studentId    Int
  student      Student          @relation(fields: [studentId], references: [id])
  courses      Course[]

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}



